name: Deploy to Netlify and Railway
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

# Add permissions for the GITHUB_TOKEN
permissions:
  contents: read
  deployments: write
  statuses: write
  pull-requests: write
  issues: write

env:
  JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
  JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
  JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      frontend-url: ${{ steps.netlify-deploy.outputs.deploy-url }}
      backend-url: ${{ steps.railway-deploy.outputs.deploy-url }}
      ticket-number: ${{ steps.get-ticket.outputs.ticket }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get Ticket Number
        id: get-ticket
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ $COMMIT_MSG =~ (feat|fix):[[:space:]]*([A-Z]+-[0-9]+) ]]; then
            echo "ticket=${BASH_REMATCH[2]}" >> $GITHUB_OUTPUT
            echo "Found ticket: ${BASH_REMATCH[2]}"
          else
            echo "No ticket found in commit message"
            echo "ticket=NO-TICKET" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Frontend build and deploy
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: |
          npm install
          npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Deploy Frontend to Netlify
        id: netlify-deploy
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './frontend/dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy frontend from GitHub Actions'
          enable-pull-request-comment: true
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 10

      # Backend build and deploy
      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy Backend to Railway
        id: railway-deploy
        working-directory: ./backend
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          # Verify token is set
          if [ -z "$RAILWAY_TOKEN" ]; then
            echo "Error: RAILWAY_TOKEN is not set"
            exit 1
          fi
          
          # Deploy using environment variables
          railway up --service backend-service
          
          # Set the deployment URL
          echo "deploy-url=https://automated-deployment-production-3efb.up.railway.app" >> $GITHUB_OUTPUT

  deployment-status:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js and Install axios
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install axios
        run: npm install axios

      - name: Check Deployment Status and Update Jira
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const axios = require('axios');
            
            try {
              const frontendUrl = '${{ needs.deploy.outputs.frontend-url }}';
              const backendUrl = '${{ needs.deploy.outputs.backend-url }}';
              const ticketNumber = '${{ needs.deploy.outputs.ticket-number }}';
              const repoOwner = context.repo.owner;
              const repoName = context.repo.name;
              
              console.log('Repository:', `${repoOwner}/${repoName}`);
              console.log('Frontend URL:', frontendUrl);
              console.log('Backend URL:', backendUrl);
              console.log('Ticket Number:', ticketNumber);
              
              let message = `üöÄ Deployment Status\n\n`;
              
              if (ticketNumber && ticketNumber !== 'NO-TICKET') {
                message += `Ticket: ${ticketNumber}\n`;
              }
              
              message += `Frontend: ${frontendUrl ? '‚úÖ Deployed to: ' + frontendUrl : '‚ùå Deployment failed'}\n`;
              message += `Backend: ${backendUrl ? '‚úÖ Deployed to: ' + backendUrl : '‚ùå Deployment failed'}`;
              
              // Add Jira link if ticket exists
              if (ticketNumber && ticketNumber !== 'NO-TICKET') {
                const jiraUrl = `${process.env.JIRA_BASE_URL}/browse/${ticketNumber}`;
                message += `\n\nJira Ticket: [${ticketNumber}](${jiraUrl})`;
                
                try {
                  // Add comment to Jira
                  const jiraComment = {
                    body: {
                      type: "doc",
                      version: 1,
                      content: [
                        {
                          type: "paragraph",
                          content: [
                            {
                              text: `üöÄ Deployment Update\n\nFrontend: ${frontendUrl ? '‚úÖ Deployed to: ' + frontendUrl : '‚ùå Deployment failed'}\nBackend: ${backendUrl ? '‚úÖ Deployed to: ' + backendUrl : '‚ùå Deployment failed'}\n\nDeployed at: ${new Date().toISOString()}`,
                              type: "text"
                            }
                          ]
                        }
                      ]
                    }
                  };

                  // Encode credentials for Basic Auth
                  const credentials = Buffer.from(`${process.env.JIRA_EMAIL}:${process.env.JIRA_API_TOKEN}`).toString('base64');
                  
                  // Post comment to Jira
                  await axios({
                    method: 'post',
                    url: `${process.env.JIRA_BASE_URL}/rest/api/3/issue/${ticketNumber}/comment`,
                    headers: {
                      'Authorization': `Basic ${credentials}`,
                      'Accept': 'application/json',
                      'Content-Type': 'application/json'
                    },
                    data: jiraComment
                  });
                  
                  console.log(`Successfully added comment to Jira ticket ${ticketNumber}`);
                } catch (jiraError) {
                  console.error('Error posting to Jira:', jiraError.message);
                }
              }
              
              // Add timestamp
              message += `\n\nDeployed at: ${new Date().toISOString()}`;
              
              // Try to create issue comment if we're in a PR
              if (context.issue.number) {
                try {
                  await github.rest.issues.createComment({
                    owner: repoOwner,
                    repo: repoName,
                    issue_number: context.issue.number,
                    body: message
                  });
                  console.log('Successfully posted PR comment');
                } catch (prError) {
                  console.error('Error posting PR comment:', prError.message);
                }
              }
              
              // Try to create commit comment
              try {
                const sha = context.sha;
                await github.rest.repos.createCommitComment({
                  owner: repoOwner,
                  repo: repoName,
                  commit_sha: sha,
                  body: message
                });
                console.log('Successfully posted commit comment');
              } catch (commitError) {
                console.error('Error posting commit comment:', commitError.message);
              }
            } catch (error) {
              console.error('Error in deployment status step:', error.message);
              core.setFailed(`Deployment status update failed: ${error.message}`);
            } 